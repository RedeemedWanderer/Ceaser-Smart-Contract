// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Address.sol";

/**
 * Tokenomics:
 * 
 * Liquidity        0%
 * Redistribution   1.69%
 * Burn             0.31%
 * Charity          0%
 * Marketing        0%
 */

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

abstract contract Tokenomics {
    using Address for address;

    string internal constant NAME = "Ceaser";
    string internal constant SYMBOL = "CSR";
    uint8 internal constant DECIMALS = 9;

    uint256 internal constant TOTAL_SUPPLY = 110000000 * 10**uint256(DECIMALS);

    uint256 internal constant FEES_DIVISOR = 10**4;
    uint256 internal constant REDISTRIBUTION_FEE = 169; // 1.69%
    uint256 internal constant BURN_FEE = 31; // 0.31%

    address internal constant BURN_ADDRESS = address(0);

    uint256 internal _reflectedSupply = (TOTAL_SUPPLY * 2**128 - 1);

    mapping(address => uint256) internal _reflectedBalances;
    mapping(address => uint256) internal _balances;
    mapping(address => mapping(address => uint256)) internal _allowances;
    mapping(address => bool) internal _isExcludedFromFee;
    mapping(address => bool) internal _isExcludedFromRewards;
    address[] internal _excluded;

    function _getValues(uint256 tAmount) internal view returns (uint256, uint256, uint256, uint256, uint256) {
        uint256 tFee = tAmount * REDISTRIBUTION_FEE / FEES_DIVISOR;
        uint256 tBurn = tAmount * BURN_FEE / FEES_DIVISOR;
        uint256 tTransferAmount = tAmount - tFee - tBurn;
        uint256 currentRate = _getRate();
        uint256 rAmount = tAmount * currentRate;
        uint256 rFee = tFee * currentRate;
        uint256 rBurn = tBurn * currentRate;
        uint256 rTransferAmount = rAmount - rFee - rBurn;
        return (rAmount, rTransferAmount, tFee, tBurn, tTransferAmount);
    }

    function _getRate() internal view returns (uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply / tSupply;
    }

    function _getCurrentSupply() internal view returns (uint256, uint256) {
        uint256 rSupply = _reflectedSupply;
        uint256 tSupply = TOTAL_SUPPLY;
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (_reflectedBalances[_excluded[i]] > rSupply || _balances[_excluded[i]] > tSupply) return (_reflectedSupply, TOTAL_SUPPLY);
            rSupply -= _reflectedBalances[_excluded[i]];
            tSupply -= _balances[_excluded[i]];
        }
        if (rSupply < _reflectedSupply / TOTAL_SUPPLY) return (_reflectedSupply, TOTAL_SUPPLY);
        return (rSupply, tSupply);
    }

    function _redistribute(uint256 tFee, uint256 currentRate) internal {
        uint256 rFee = tFee * currentRate;
        _reflectedSupply -= rFee;
    }

    function _burnTokens(uint256 tBurn, uint256 currentRate) internal {
        uint256 rBurn = tBurn * currentRate;
        _reflectedBalances[BURN_ADDRESS] += rBurn;
        if (_isExcludedFromRewards[BURN_ADDRESS]) {
            _balances[BURN_ADDRESS] += tBurn;
        }
    }
}

contract CeaserToken is IERC20, IERC20Metadata, Tokenomics, Ownable {

    constructor() Ownable(msg.sender) {
        _reflectedBalances[msg.sender] = _reflectedSupply;
        emit Transfer(address(0), msg.sender, TOTAL_SUPPLY);
    }

    function name() public view virtual override returns (string memory) {
        return NAME;
    }

    function symbol() public view virtual override returns (string memory) {
        return SYMBOL;
    }

    function decimals() public view virtual override returns (uint8) {
        return DECIMALS;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return TOTAL_SUPPLY;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        if (_isExcludedFromRewards[account]) return _balances[account];
        return tokenFromReflection(_reflectedBalances[account]);
    }

    function tokenFromReflection(uint256 rAmount) internal view returns (uint256) {
        uint256 currentRate = _getRate();
        return rAmount / currentRate;
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "CeaserToken: transfer amount exceeds allowance");
        _approve(sender, msg.sender, currentAllowance - amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "CeaserToken: transfer from the zero address");
        require(recipient != address(0), "CeaserToken: transfer to the zero address");

        uint256 senderBalance = _reflectedBalances[sender];
        require(senderBalance >= amount, "CeaserToken: transfer amount exceeds balance");

        uint256 currentRate = _getRate();
        (uint256 rAmount, uint256 rTransferAmount, uint256 tFee, uint256 tBurn, uint256 tTransferAmount) = _getValues(amount);

        _reflectedBalances[sender] -= rAmount;
        _reflectedBalances[recipient] += rTransferAmount;

        if (_isExcludedFromRewards[sender]) _balances[sender] -= amount;
        if (_isExcludedFromRewards[recipient]) _balances[recipient] += tTransferAmount;

        _redistribute(tFee, currentRate);
        _burnTokens(tBurn, currentRate);

        emit Transfer(sender, recipient, tTransferAmount);
        emit Transfer(sender, BURN_ADDRESS, tBurn);
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "CeaserToken: approve from the zero address");
        require(spender != address(0), "CeaserToken: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}

