// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * Tokenomics:
 * 
 * Liquidity        0%
 * Redistribution   1.69%
 * Burn             0.31%
 * Charity          0%
 * Marketing        0%
 */

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly { size := extcodesize(account) }
        return size > 0;
    }
}

abstract contract Tokenomics {
    using Address for address;

    string internal constant NAME = "Ceaser";
    string internal constant SYMBOL = "CSR";
    uint8 internal constant DECIMALS = 9;

    uint256 internal constant FEES_DIVISOR = 10**4;
    uint256 internal constant REDISTRIBUTION_FEE = 169; // 1.69%
    uint256 internal constant BURN_FEE = 31; // 0.31%

    function _applyFees(uint256 amount) internal pure returns (uint256) {
        uint256 totalFee = REDISTRIBUTION_FEE + BURN_FEE;
        uint256 feeAmount = amount * totalFee / FEES_DIVISOR;
        return amount - feeAmount;
    }
}

contract CeaserToken is Context, IERC20, IERC20Metadata, Tokenomics, Ownable {
    using Address for address;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;

    constructor() {
        _totalSupply = 110000000 * 10**uint256(DECIMALS);
        _balances[_msgSender()] = _totalSupply;
        emit Transfer(address(0), _msgSender(), _totalSupply);

        transferOwnership(_msgSender()); // Set the initial owner
    }

    function name() public view virtual override returns (string memory) {
        return NAME;
    }

    function symbol() public view virtual override returns (string memory) {
        return SYMBOL;
    }

    function decimals() public view virtual override returns (uint8) {
        return DECIMALS;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "CeaserToken: transfer amount exceeds allowance");
        _approve(sender, _msgSender(), currentAllowance - amount);

        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "CeaserToken: transfer from the zero address");
        require(recipient != address(0), "CeaserToken: transfer to the zero address");

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "CeaserToken: transfer amount exceeds balance");

        uint256 netAmount = _applyFees(amount);

        _balances[sender] = senderBalance - amount;
        _balances[recipient] += netAmount;

        emit Transfer(sender, recipient, amount); // Log gross amount
        emit Transfer(sender, address(0), amount - netAmount); // Log fees
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "CeaserToken: approve from the zero address");
        require(spender != address(0), "CeaserToken: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}

